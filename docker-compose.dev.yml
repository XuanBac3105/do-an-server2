# version: '3.8'
services:
  db:
    image: postgres:15-alpine
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # MinIO console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 12

  minio-init:
    image: minio/mc:latest
    env_file:
      - .env
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-http://minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET: ${MINIO_BUCKET:-app-bucket}
    entrypoint: ["/bin/sh", "-c"]
    command: |
      # wait for MinIO to be ready then configure alias and bucket
      for i in $(seq 1 30); do
        if curl -s http://minio:9000/minio/health/ready >/dev/null 2>&1; then
          break
        fi
        sleep 1
      done
      mc alias set local ${MINIO_ENDPOINT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} && \
      mc mb --ignore-existing local/${MINIO_BUCKET} && \
      mc policy set public local/${MINIO_BUCKET} || true

volumes:
  db_data:
  minio_data: