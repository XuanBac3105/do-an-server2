
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OtpRecordScalarFieldEnum = {
  id: 'id',
  email: 'email',
  OtpCode: 'OtpCode',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  issuedAt: 'issuedAt',
  expiresAt: 'expiresAt',
  revokedAt: 'revokedAt',
  replacedByHash: 'replacedByHash'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  disk: 'disk',
  bucket: 'bucket',
  objectKey: 'objectKey',
  mimeType: 'mimeType',
  sizeBytes: 'sizeBytes',
  visibility: 'visibility',
  uploadedBy: 'uploadedBy',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  email: 'email',
  passwordHash: 'passwordHash',
  phone: 'phone',
  role: 'role',
  avatarMediaId: 'avatarMediaId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassroomScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  tutorId: 'tutorId',
  coverMediaId: 'coverMediaId',
  isArchived: 'isArchived',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassroomStudentScalarFieldEnum = {
  classroomId: 'classroomId',
  studentId: 'studentId',
  joinedAt: 'joinedAt',
  status: 'status'
};

exports.Prisma.JoinRequestScalarFieldEnum = {
  id: 'id',
  classroomId: 'classroomId',
  studentId: 'studentId',
  status: 'status',
  requestedAt: 'requestedAt',
  handledAt: 'handledAt'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  classroomId: 'classroomId',
  parentId: 'parentId',
  title: 'title',
  content: 'content',
  lessonType: 'lessonType',
  orderIndex: 'orderIndex',
  publishedAt: 'publishedAt'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  title: 'title',
  mediaId: 'mediaId',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  title: 'title',
  description: 'description',
  attachMediaId: 'attachMediaId',
  dueAt: 'dueAt',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ExerciseSubmissionScalarFieldEnum = {
  id: 'id',
  exerciseId: 'exerciseId',
  studentId: 'studentId',
  mediaId: 'mediaId',
  submittedAt: 'submittedAt',
  score: 'score',
  comment: 'comment',
  gradedAt: 'gradedAt'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  title: 'title',
  description: 'description',
  timeLimitSec: 'timeLimitSec',
  maxAttempts: 'maxAttempts',
  shuffleQuestions: 'shuffleQuestions',
  shuffleOptions: 'shuffleOptions',
  gradingMethod: 'gradingMethod',
  showAnswersAfter: 'showAnswersAfter',
  dueAt: 'dueAt',
  isPublished: 'isPublished',
  totalPoints: 'totalPoints',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.QuizSectionScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  title: 'title',
  description: 'description',
  orderIndex: 'orderIndex'
};

exports.Prisma.QuizQuestionGroupScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  sectionId: 'sectionId',
  title: 'title',
  introText: 'introText',
  orderIndex: 'orderIndex',
  shuffleInside: 'shuffleInside',
  pointsPolicy: 'pointsPolicy',
  createdAt: 'createdAt'
};

exports.Prisma.QuizQuestionScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  sectionId: 'sectionId',
  groupId: 'groupId',
  content: 'content',
  explanation: 'explanation',
  questionType: 'questionType',
  points: 'points',
  orderIndex: 'orderIndex'
};

exports.Prisma.QuizOptionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  content: 'content',
  isCorrect: 'isCorrect',
  orderIndex: 'orderIndex'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  studentId: 'studentId',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt',
  status: 'status',
  scoreRaw: 'scoreRaw',
  scoreScaled10: 'scoreScaled10'
};

exports.Prisma.QuizAnswerScalarFieldEnum = {
  attemptId: 'attemptId',
  questionId: 'questionId',
  optionId: 'optionId'
};

exports.Prisma.QuizQuestionGroupMediaScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  mediaId: 'mediaId',
  createdAt: 'createdAt'
};

exports.Prisma.QuizQuestionMediaScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  mediaId: 'mediaId',
  createdAt: 'createdAt'
};

exports.Prisma.QuizOptionMediaScalarFieldEnum = {
  id: 'id',
  optionId: 'optionId',
  mediaId: 'mediaId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  student: 'student',
  admin: 'admin',
  rootAdmin: 'rootAdmin'
};

exports.LessonType = exports.$Enums.LessonType = {
  lesson: 'lesson',
  exercise: 'exercise',
  quiz: 'quiz'
};

exports.Prisma.ModelName = {
  OtpRecord: 'OtpRecord',
  RefreshToken: 'RefreshToken',
  Media: 'Media',
  User: 'User',
  Classroom: 'Classroom',
  ClassroomStudent: 'ClassroomStudent',
  JoinRequest: 'JoinRequest',
  Lesson: 'Lesson',
  Material: 'Material',
  Exercise: 'Exercise',
  ExerciseSubmission: 'ExerciseSubmission',
  Quiz: 'Quiz',
  QuizSection: 'QuizSection',
  QuizQuestionGroup: 'QuizQuestionGroup',
  QuizQuestion: 'QuizQuestion',
  QuizOption: 'QuizOption',
  QuizAttempt: 'QuizAttempt',
  QuizAnswer: 'QuizAnswer',
  QuizQuestionGroupMedia: 'QuizQuestionGroupMedia',
  QuizQuestionMedia: 'QuizQuestionMedia',
  QuizOptionMedia: 'QuizOptionMedia'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
